{
  "version": 3,
  "sources": ["/home/runner/work/Three.LS/Three.LS/src/LSystem.ts"],
  "sourcesContent": ["import { Rule } from './Rule';\n\nexport class LSystem {\n    private sentence: string; // The sentence (a string)\n    private ruleset: Rule[]; // The ruleset (an array of Rule objects)\n    private generation: number; // Keeping track of the generation #\n\n    // Construct an LSystem with a startin sentence and a ruleset\n    constructor(axiom: string, rule: Rule[]) {\n        this.sentence = axiom;\n        this.ruleset = rule;\n        this.generation = 0;\n    }\n\n    // Generate the next generation\n    generate() {\n        const nextGenerationString: string[] = [];\n        for (let i = 0; i < this.sentence.length; i++) {\n            const currentCharacter: string = this.sentence[i];\n            let replace: string = currentCharacter;\n            for (let j = 0; j < this.ruleset.length; j++) {\n                if (this.ruleset[j].getA() == currentCharacter) {\n                    replace = this.ruleset[j].getB();\n                    break;\n                }\n            }\n            // Append replacement string\n            nextGenerationString.push(replace);\n        }\n        // Replace sentence\n        this.sentence = nextGenerationString.join('');\n        // Increment generation\n        this.generation++;\n    }\n\n    getSentence(): string {\n        return this.sentence;\n    }\n\n    getGeneration(): number {\n        return this.generation;\n    }\n}\n"],
  "mappings": "AAAA;AAAA,EAQI,YAAY;AACR,SAAK,WAAW;AAChB,SAAK,UAAU;AACf,SAAK,aAAa;AAAA;AAAA,EAItB;AACI,iCAAuC;AACvC,iBAAa,GAAG,IAAI,KAAK,SAAS,QAAQ;AACtC,+BAAiC,KAAK,SAAS;AAC/C,oBAAsB;AACtB,mBAAa,GAAG,IAAI,KAAK,QAAQ,QAAQ;AACrC,YAAI,KAAK,QAAQ,GAAG,UAAU;AAC1B,oBAAU,KAAK,QAAQ,GAAG;AAC1B;AAAA;AAAA;AAIR,2BAAqB,KAAK;AAAA;AAG9B,SAAK,WAAW,qBAAqB,KAAK;AAE1C,SAAK;AAAA;AAAA,EAGT;AACI,WAAO,KAAK;AAAA;AAAA,EAGhB;AACI,WAAO,KAAK;AAAA;AAAA;",
  "names": []
}
