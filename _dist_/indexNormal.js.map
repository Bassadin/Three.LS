{
  "version": 3,
  "sources": ["/home/runner/work/Three.LS/Three.LS/src/indexNormal.ts"],
  "sourcesContent": ["import * as THREE from 'three';\nimport { Clock, Scene } from 'three';\nimport { TrackballControls } from 'three/examples/jsm/controls/TrackballControls.js';\nimport Turtle from './Turtle';\nimport { LindenmayerFormular } from './LindenmayerFormular';\nimport PerformanceStats from './PerformanceStats';\nimport Utils from './Utils';\n\nimport './styles/styles.scss';\n\nexport let scene: Scene;\nlet camera: THREE.PerspectiveCamera;\nlet renderer: THREE.WebGLRenderer;\nlet controls: TrackballControls;\nconst sceneClock: Clock = new Clock();\n\nconst lindenmayerSettingsForm: LindenmayerFormular = LindenmayerFormular.getInstance();\nconst newTurtle: Turtle = lindenmayerSettingsForm.generateLSystemImage();\n\n// check if system is undefined and init or repaint scene\nif (scene !== undefined) {\n    repaint(newTurtle);\n} else {\n    initTestingScene(newTurtle);\n    animate();\n}\n// add event-listener to generate button\nfunction hookUpGenerateButtonEventListener() {\n    const btnGenerate: HTMLInputElement = document.querySelector('#btnGenerate');\n    btnGenerate.addEventListener('click', (e) => {\n        e.preventDefault();\n        generateAndRepaintLindenmayerMesh();\n    });\n}\n// repaint or generate scene with tree mesh\nexport function generateAndRepaintLindenmayerMesh() {\n    const form: LindenmayerFormular = LindenmayerFormular.getInstance();\n    const newTurtle: Turtle = form.generateLSystemImage();\n    if (scene !== undefined) {\n        repaint(newTurtle);\n    } else {\n        initTestingScene(newTurtle);\n        animate();\n    }\n}\n// init scene\nfunction initTestingScene(turtle: Turtle) {\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    document.body.appendChild(renderer.domElement);\n\n    // far is that high, that we can see the whole tree without zoom out = 10000 instaed of 2000\n    camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 10000);\n\n    controls = new TrackballControls(camera, renderer.domElement);\n    controls.rotateSpeed = 2; //set control rotation speed to 2 to have more speed\n    camera.position.set(0, 0, 15); // set cam position in z-direction to look at the whole scene\n    controls.update();\n\n    scene = new THREE.Scene();\n\n    const generatedMeshObject = turtle.generateMeshObject();\n    generatedMeshObject.userData.isLSystemTree = true;\n\n    scene.add(generatedMeshObject);\n    scene.add(Utils.createPlane());\n\n    // console.log(scene);\n\n    sceneClock.start();\n\n    renderer.render(scene, camera);\n\n    const light = new THREE.AmbientLight(0xffffff, 1); // soft white light\n    scene.add(light);\n\n    window.addEventListener('resize', onWindowResize, false);\n\n    hookUpGenerateButtonEventListener();\n}\n// repaint scene\nfunction repaint(turtle: Turtle) {\n    console.log(scene.children);\n    scene.children.forEach((eachSceneChild) => {\n        console.log(eachSceneChild.userData);\n        if (eachSceneChild.userData.isLSystemTree) {\n            eachSceneChild.removeFromParent();\n        }\n    });\n\n    const generatedMeshObject = turtle.generateMeshObject();\n    generatedMeshObject.userData.isLSystemTree = true;\n\n    scene.add(generatedMeshObject);\n}\n// animate\nfunction animate() {\n    renderer.setAnimationLoop(render);\n}\n// renderer render\nfunction render() {\n    renderer.render(scene, camera);\n\n    controls?.update(); // Only update controls if present\n    PerformanceStats.instance?.update(); // Only update stats if present\n}\n// resize to fullscreen\nfunction onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n}\n"],
  "mappings": "AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEO,WAAI;AACX,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,MAAM,aAAoB,IAAI;AAE9B,MAAM,0BAA+C,oBAAoB;AACzE,MAAM,YAAoB,wBAAwB;AAGlD,IAAI,UAAU,QAAW;AACrB,UAAQ;AAAA,OACL;AACH,mBAAiB;AACjB;AAAA;AAGJ,6CAA6C;AACzC,QAAM,cAAgC,SAAS,cAAc;AAC7D,cAAY,iBAAiB,SAAS,CAAC,MAAM;AACzC,MAAE;AACF;AAAA;AAAA;AAID,oDAA6C;AAChD,QAAM,OAA4B,oBAAoB;AACtD,QAAM,aAAoB,KAAK;AAC/B,MAAI,UAAU,QAAW;AACrB,YAAQ;AAAA,SACL;AACH,qBAAiB;AACjB;AAAA;AAAA;AAIR,0BAA0B,QAAgB;AACtC,aAAW,IAAI,MAAM;AACrB,WAAS,QAAQ,OAAO,YAAY,OAAO;AAC3C,WAAS,cAAc,OAAO;AAC9B,WAAS,KAAK,YAAY,SAAS;AAGnC,WAAS,IAAI,MAAM,kBAAkB,IAAI,OAAO,aAAa,OAAO,aAAa,GAAG;AAEpF,aAAW,IAAI,kBAAkB,QAAQ,SAAS;AAClD,WAAS,cAAc;AACvB,SAAO,SAAS,IAAI,GAAG,GAAG;AAC1B,WAAS;AAET,UAAQ,IAAI,MAAM;AAElB,QAAM,sBAAsB,OAAO;AACnC,sBAAoB,SAAS,gBAAgB;AAE7C,QAAM,IAAI;AACV,QAAM,IAAI,MAAM;AAIhB,aAAW;AAEX,WAAS,OAAO,OAAO;AAEvB,QAAM,QAAQ,IAAI,MAAM,aAAa,UAAU;AAC/C,QAAM,IAAI;AAEV,SAAO,iBAAiB,UAAU,gBAAgB;AAElD;AAAA;AAGJ,iBAAiB,QAAgB;AAC7B,UAAQ,IAAI,MAAM;AAClB,QAAM,SAAS,QAAQ,CAAC,mBAAmB;AACvC,YAAQ,IAAI,eAAe;AAC3B,QAAI,eAAe,SAAS,eAAe;AACvC,qBAAe;AAAA;AAAA;AAIvB,QAAM,sBAAsB,OAAO;AACnC,sBAAoB,SAAS,gBAAgB;AAE7C,QAAM,IAAI;AAAA;AAGd,mBAAmB;AACf,WAAS,iBAAiB;AAAA;AAG9B,kBAAkB;AACd,WAAS,OAAO,OAAO;AAEvB,YAAU;AACV,mBAAiB,UAAU;AAAA;AAG/B,0BAA0B;AACtB,SAAO,SAAS,OAAO,aAAa,OAAO;AAC3C,SAAO;AAEP,WAAS,QAAQ,OAAO,YAAY,OAAO;AAAA;",
  "names": []
}
