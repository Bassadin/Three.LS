{
  "version": 3,
  "sources": ["/home/runner/work/Three.LS/Three.LS/src/indexAR.ts"],
  "sourcesContent": ["import * as THREE from 'three';\nimport { Clock, Mesh, PlaneGeometry, Scene, ShadowMaterial, XRFrame, XRHitTestSource } from 'three';\nimport Turtle from './Turtle';\n// import PerformanceStats from './PerformanceStats';\nimport { ARButton } from 'three/examples/jsm/webxr/ARButton.js';\nimport { XREstimatedLight } from 'three/examples/jsm/webxr/XREstimatedLight.js';\nimport Utils from './Utils';\nimport { LSystem } from './LSystem';\nimport { Rule } from './Rule';\nimport LindenmayerTree from './LindenmayerTree';\n\nimport './styles/ar.scss';\n\nlet hitTestSource: XRHitTestSource = null;\nlet hitTestSourceRequested = false;\n\nlet shadowPlane: Mesh;\nlet shadowPlaneCreated: boolean;\n\nconst sceneClock: Clock = new Clock();\n\nexport const scene: Scene = new THREE.Scene();\nconst camera: THREE.PerspectiveCamera = new THREE.PerspectiveCamera(\n    70,\n    window.innerWidth / window.innerHeight,\n    0.01,\n    20,\n);\nconst renderer: THREE.WebGLRenderer = new THREE.WebGLRenderer({\n    alpha: true,\n    powerPreference: 'high-performance',\n});\n\nconst treeObjects: LindenmayerTree[] = [];\n\n// Add AR target reticle\nconst reticle: Mesh = new THREE.Mesh(\n    new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2),\n    new THREE.MeshBasicMaterial(),\n);\nreticle.matrixAutoUpdate = false;\nreticle.visible = false;\nscene.add(reticle);\n\nfunction main() {\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.xr.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    renderer.shadowMap.enabled = true;\n\n    document.body.appendChild(renderer.domElement);\n\n    document.body.appendChild(ARButton.createButton(renderer, { requiredFeatures: ['hit-test', 'light-estimation'] }));\n\n    const defaultLight = new THREE.AmbientLight(0xffffff);\n    scene.add(defaultLight);\n\n    // Turtle data\n    const ruleset: Rule[] = [];\n    ruleset.push(new Rule('F', 'F&F+[+F/-F-F]-[-F+F+F]'));\n    const lsys: LSystem = new LSystem('F', ruleset);\n    for (let i = 0; i < 3; i++) lsys.generate();\n\n    function onSelect() {\n        const turtle: Turtle = new Turtle(\n            lsys.getSentence(),\n            1,\n            Utils.DegreesToRadians(30),\n            Utils.RandomRange(0.8, 1.2),\n            true,\n        );\n        const turtleMesh = turtle.generateMeshObject();\n        // turtleMesh.position.set(0, 0, -0.8).applyMatrix4(controller.matrixWorld);\n        turtleMesh.position.setFromMatrixPosition(reticle.matrix);\n\n        turtleMesh.rotateY(Utils.RandomRange(0.0, Math.PI * 2));\n        const newTreeObject = new LindenmayerTree(turtleMesh, Utils.RandomRange(0.02, 0.035));\n        treeObjects.push(newTreeObject);\n        scene.add(newTreeObject);\n    }\n\n    const controller = renderer.xr.getController(0);\n    controller.addEventListener('select', onSelect);\n    scene.add(controller);\n\n    //XR Light\n    const xrLight = new XREstimatedLight(renderer);\n    xrLight.directionalLight.castShadow = true;\n\n    xrLight.addEventListener('estimationstart', () => {\n        // Swap the default light out for the estimated one one we start getting some estimated values.\n        scene.add(xrLight);\n        scene.remove(defaultLight);\n    });\n\n    xrLight.addEventListener('estimationend', () => {\n        // Swap the lights back when we stop receiving estimated values.\n        scene.add(defaultLight);\n        scene.remove(xrLight);\n    });\n\n    //Shadow plane\n    addShadowPlaneToScene();\n\n    window.addEventListener('resize', onWindowResize, false);\n    renderer.setAnimationLoop(render);\n}\n\nfunction addShadowPlaneToScene() {\n    const geometry = new PlaneGeometry(2000, 2000);\n    geometry.rotateX(-Math.PI / 2);\n\n    const material = new ShadowMaterial();\n    material.opacity = 0.5;\n\n    shadowPlane = new Mesh(geometry, material);\n    shadowPlane.receiveShadow = true;\n    shadowPlane.visible = false;\n    shadowPlane.matrixAutoUpdate = false;\n    scene.add(shadowPlane);\n}\n\nfunction render(timestamp: number, frame: XRFrame) {\n    const deltaTime: number = sceneClock.getDelta();\n    // Tree Rotation\n    treeObjects.forEach((eachTreeObject) => {\n        eachTreeObject.render(deltaTime);\n    });\n\n    //XR Stuff\n    if (frame) {\n        const referenceSpace = renderer.xr.getReferenceSpace();\n        const session = renderer.xr.getSession();\n\n        if (hitTestSourceRequested === false) {\n            session.requestReferenceSpace('viewer').then(function (referenceSpace) {\n                session.requestHitTestSource({ space: referenceSpace }).then(function (source) {\n                    hitTestSource = source;\n                });\n            });\n            session.addEventListener('end', function () {\n                hitTestSourceRequested = false;\n                hitTestSource = null;\n            });\n\n            hitTestSourceRequested = true;\n        }\n\n        if (hitTestSource) {\n            const hitTestResults = frame.getHitTestResults(hitTestSource);\n\n            if (hitTestResults.length) {\n                const hit = hitTestResults[0];\n\n                reticle.visible = true;\n                const pose = hit.getPose(referenceSpace);\n                const poseTransformMatrix = pose.transform.matrix;\n                reticle.matrix.fromArray(poseTransformMatrix);\n\n                shadowPlane.visible = true;\n                if (!shadowPlaneCreated) {\n                    shadowPlane.matrix.fromArray(poseTransformMatrix);\n                    shadowPlaneCreated = true;\n                }\n            } else {\n                reticle.visible = false;\n            }\n        }\n    }\n\n    renderer.render(scene, camera);\n\n    // PerformanceStats.instance?.update(); // Only update stats if present\n}\n\nfunction onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\n//Start main loop\nmain();\n"],
  "mappings": "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",
  "names": []
}
