{
  "version": 3,
  "sources": ["/home/runner/work/Three.LS/Three.LS/src/indexAR.ts"],
  "sourcesContent": ["import * as THREE from 'three';\nimport { Mesh, Scene, XRFrame, XRHitTestSource } from 'three';\nimport Turtle from './Turtle';\nimport PerformanceStats from './PerformanceStats';\nimport { ARButton } from 'three/examples/jsm/webxr/ARButton.js';\nimport { Utils } from './Utils';\nimport { LSystem } from './LSystem';\nimport { Rule } from './Rule';\n\nlet hitTestSource: XRHitTestSource = null;\nlet hitTestSourceRequested = false;\n\nexport const scene: Scene = new THREE.Scene();\nconst camera: THREE.PerspectiveCamera = new THREE.PerspectiveCamera(\n    70,\n    window.innerWidth / window.innerHeight,\n    0.01,\n    20,\n);\nconst renderer: THREE.WebGLRenderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n\n// Add AR target reticle\nconst reticle: Mesh = new THREE.Mesh(\n    new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2),\n    new THREE.MeshBasicMaterial(),\n);\nreticle.matrixAutoUpdate = false;\nreticle.visible = false;\nscene.add(reticle);\n\nfunction main() {\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.xr.enabled = true;\n    document.body.appendChild(renderer.domElement);\n\n    document.body.appendChild(ARButton.createButton(renderer, { requiredFeatures: ['hit-test'] }));\n\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n\n    // Turtle data\n    const ruleset: Rule[] = [];\n    ruleset.push(new Rule('F', 'F&F+[+F/-F-F]-[-F+F+F]'));\n    const lsys: LSystem = new LSystem('F', ruleset);\n    for (let i = 0; i < 3; i++) lsys.generate();\n\n    function onSelect() {\n        const turtle: Turtle = new Turtle(\n            lsys.getSentence(),\n            1,\n            Utils.DegreesToRadians(30),\n            Utils.RandomNumber(0.8, 1.2),\n        );\n        const turtleMesh = turtle.generateMeshObject();\n        // turtleMesh.position.set(0, 0, -0.8).applyMatrix4(controller.matrixWorld);\n        turtleMesh.position.setFromMatrixPosition(reticle.matrix);\n        turtleMesh.scale.set(0.05, 0.05, 0.05);\n        turtleMesh.quaternion.setFromRotationMatrix(controller.matrixWorld);\n        scene.add(turtleMesh);\n    }\n\n    const controller = renderer.xr.getController(0);\n    controller.addEventListener('select', onSelect);\n    scene.add(controller);\n\n    window.addEventListener('resize', onWindowResize, false);\n\n    renderer.setAnimationLoop(render);\n}\n\nfunction render(timestamp: number, frame: XRFrame) {\n    if (frame) {\n        const referenceSpace = renderer.xr.getReferenceSpace();\n        const session = renderer.xr.getSession();\n\n        if (hitTestSourceRequested === false) {\n            session.requestReferenceSpace('viewer').then(function (referenceSpace) {\n                session.requestHitTestSource({ space: referenceSpace }).then(function (source) {\n                    hitTestSource = source;\n                });\n            });\n\n            session.addEventListener('end', function () {\n                hitTestSourceRequested = false;\n                hitTestSource = null;\n            });\n\n            hitTestSourceRequested = true;\n        }\n\n        if (hitTestSource) {\n            const hitTestResults = frame.getHitTestResults(hitTestSource);\n\n            if (hitTestResults.length) {\n                const hit = hitTestResults[0];\n\n                reticle.visible = true;\n                reticle.matrix.fromArray(hit.getPose(referenceSpace).transform.matrix);\n            } else {\n                reticle.visible = false;\n            }\n        }\n    }\n\n    renderer.render(scene, camera);\n\n    PerformanceStats.instance?.update(); // Only update stats if present\n\n    // branchingIds.forEach((eachId) => {\n    //     const obj: THREE.Mesh = scene.getObjectById(eachId) as THREE.Mesh;\n    //     if (obj) {\n    //         const shaderMaterial: ShaderMaterial = obj.material as ShaderMaterial;\n    //         shaderMaterial.uniforms.time.value += 0.01;\n    //         obj.rotation.copy(\n    //             new Euler(\n    //                 Math.sin(sceneClock.getElapsedTime() * 2) * 0.002 - 0.001,\n    //                 Math.sin(sceneClock.getElapsedTime() * 1) * 0.02 - 0.01,\n    //                 Math.cos(sceneClock.getElapsedTime() * 1.3) * 0.003 - 0.0015,\n    //                 'XYZ',\n    //             ),\n    //         );\n    //     }\n    // });\n}\n\nfunction onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\n//Start main loop\nmain();\n"],
  "mappings": "AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAI,gBAAiC;AACrC,IAAI,yBAAyB;AAEtB,aAAM,QAAe,IAAI,MAAM;AACtC,MAAM,SAAkC,IAAI,MAAM,kBAC9C,IACA,OAAO,aAAa,OAAO,aAC3B,MACA;AAEJ,MAAM,WAAgC,IAAI,MAAM,cAAc,CAAE,WAAW,MAAM,OAAO;AAGxF,MAAM,UAAgB,IAAI,MAAM,KAC5B,IAAI,MAAM,aAAa,MAAM,KAAK,IAAI,QAAQ,CAAC,KAAK,KAAK,IACzD,IAAI,MAAM;AAEd,QAAQ,mBAAmB;AAC3B,QAAQ,UAAU;AAClB,MAAM,IAAI;AAEV,gBAAgB;AACZ,WAAS,cAAc,OAAO;AAC9B,WAAS,QAAQ,OAAO,YAAY,OAAO;AAC3C,WAAS,GAAG,UAAU;AACtB,WAAS,KAAK,YAAY,SAAS;AAEnC,WAAS,KAAK,YAAY,SAAS,aAAa,UAAU,CAAE,kBAAkB,CAAC;AAE/E,QAAM,QAAQ,IAAI,MAAM,gBAAgB,UAAU,UAAU;AAC5D,QAAM,SAAS,IAAI,KAAK,GAAG;AAC3B,QAAM,IAAI;AAGV,QAAM,UAAkB;AACxB,UAAQ,KAAK,IAAI,KAAK,KAAK;AAC3B,QAAM,OAAgB,IAAI,QAAQ,KAAK;AACvC,WAAS,IAAI,GAAG,IAAI,GAAG;AAAK,SAAK;AAEjC,sBAAoB;AAChB,UAAM,SAAiB,IAAI,OACvB,KAAK,eACL,GACA,MAAM,iBAAiB,KACvB,MAAM,aAAa,KAAK;AAE5B,UAAM,aAAa,OAAO;AAE1B,eAAW,SAAS,sBAAsB,QAAQ;AAClD,eAAW,MAAM,IAAI,MAAM,MAAM;AACjC,eAAW,WAAW,sBAAsB,WAAW;AACvD,UAAM,IAAI;AAAA;AAGd,QAAM,aAAa,SAAS,GAAG,cAAc;AAC7C,aAAW,iBAAiB,UAAU;AACtC,QAAM,IAAI;AAEV,SAAO,iBAAiB,UAAU,gBAAgB;AAElD,WAAS,iBAAiB;AAAA;AAG9B,gBAAgB,WAAmB,OAAgB;AAC/C,MAAI,OAAO;AACP,UAAM,iBAAiB,SAAS,GAAG;AACnC,UAAM,UAAU,SAAS,GAAG;AAE5B,QAAI,2BAA2B,OAAO;AAClC,cAAQ,sBAAsB,UAAU,KAAK,SAAU,iBAAgB;AACnE,gBAAQ,qBAAqB,CAAE,OAAO,kBAAkB,KAAK,SAAU,QAAQ;AAC3E,0BAAgB;AAAA;AAAA;AAIxB,cAAQ,iBAAiB,OAAO,WAAY;AACxC,iCAAyB;AACzB,wBAAgB;AAAA;AAGpB,+BAAyB;AAAA;AAG7B,QAAI,eAAe;AACf,YAAM,iBAAiB,MAAM,kBAAkB;AAE/C,UAAI,eAAe,QAAQ;AACvB,cAAM,MAAM,eAAe;AAE3B,gBAAQ,UAAU;AAClB,gBAAQ,OAAO,UAAU,IAAI,QAAQ,gBAAgB,UAAU;AAAA,aAC5D;AACH,gBAAQ,UAAU;AAAA;AAAA;AAAA;AAK9B,WAAS,OAAO,OAAO;AAEvB,mBAAiB,UAAU;AAAA;AAmB/B,0BAA0B;AACtB,SAAO,SAAS,OAAO,aAAa,OAAO;AAC3C,SAAO;AAEP,WAAS,QAAQ,OAAO,YAAY,OAAO;AAAA;AAI/C;",
  "names": []
}
