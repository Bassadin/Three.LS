{
  "version": 3,
  "sources": ["/home/runner/work/Three.LS/Three.LS/src/LindenmayerFormularAR.ts"],
  "sourcesContent": ["import Turtle from './Turtle';\nimport { Rule } from './Rule';\nimport { LSystem } from './LSystem';\nimport Utils from './Utils';\n\nexport class LindenmayerFormularAR {\n    private static instance: LindenmayerFormularAR;\n\n    // private btnOne: HTMLInputElement;\n    private btnOne: HTMLInputElement;\n    private btnTwo: HTMLInputElement;\n    private btnThree: HTMLInputElement;\n    private btnFour: HTMLInputElement;\n\n    public presetNumber = 0;\n\n    private constructor() {\n        this.btnOne = document.querySelector('#btnOne');\n        this.btnTwo = document.querySelector('#btnTwo');\n        this.btnThree = document.querySelector('#btnThree');\n        this.btnFour = document.querySelector('#btnFour');\n\n        this.addListenerToBtn();\n    }\n\n    public static getInstance(): LindenmayerFormularAR {\n        if (LindenmayerFormularAR.instance == undefined) LindenmayerFormularAR.instance = new LindenmayerFormularAR();\n        return LindenmayerFormularAR.instance;\n    }\n\n    private addListenerToBtn(): void {\n        this.btnOne.addEventListener('click', (e) => {\n            e.stopPropagation();\n            this.presetNumber = 0;\n            document.getElementById('actPreset').innerHTML = this.presetNumber.toString();\n        });\n\n        this.btnTwo.addEventListener('click', (e) => {\n            e.stopPropagation();\n            this.presetNumber = 1;\n            document.getElementById('actPreset').innerHTML = this.presetNumber.toString();\n        });\n\n        this.btnThree.addEventListener('click', (e) => {\n            e.stopPropagation();\n            this.presetNumber = 2;\n            document.getElementById('actPreset').innerHTML = this.presetNumber.toString();\n        });\n\n        this.btnFour.addEventListener('click', (e) => {\n            e.stopPropagation();\n            this.presetNumber = 3;\n            document.getElementById('actPreset').innerHTML = this.presetNumber.toString();\n        });\n    }\n\n    public generateLSystemImage(): Turtle {\n        let axiom: string;\n        let rule: string;\n        let iterations: number;\n        let degree: number;\n        let colorOne: number[] = [];\n        let colorTwo: number[] = [];\n\n        if (this.presetNumber === 0) {\n            axiom = 'F';\n            rule = 'F&F+[+F/-F-F]-[-F+F+F]';\n            iterations = 3;\n            degree = 50;\n            colorOne = [0.45, 0.29, 0.13];\n            colorTwo = [0.4, 0.72, 0.02];\n        } else if (this.presetNumber === 1) {\n            axiom = 'F';\n            rule = 'FF+[+F-\u2227\u2227\u2227F-F]-[-F+&&F+F]';\n            iterations = 3;\n            degree = 25;\n            colorOne = [0.1, 0.0, 0.4];\n            colorTwo = [0.0, 0.0, 0.9];\n        } else if (this.presetNumber === 2) {\n            axiom = 'F';\n            rule = 'F[+F/F]\u2227';\n            iterations = 7;\n            degree = 25;\n            colorOne = [0.9, 0.0, 0.0];\n            colorTwo = [0.45, 0.29, 0.13];\n        } else if (this.presetNumber === 3) {\n            axiom = 'F';\n            rule = 'FF+[+F-/F-F]-[-F+&&F+F]';\n            iterations = 3;\n            degree = 25;\n            colorOne = [0.9, 0.0, 0.0];\n            colorTwo = [0.0, 0.9, 0.9];\n        }\n\n        // Turtle data\n        const ruleset: Rule[] = [];\n        ruleset.push(new Rule(axiom, rule));\n        const lsys: LSystem = new LSystem('F', ruleset);\n        for (let i = 0; i < iterations; i++) lsys.generate();\n\n        const turtle: Turtle = new Turtle(\n            lsys.getSentence(),\n            1,\n            Utils.DegreesToRadians(degree),\n            colorOne,\n            colorTwo,\n            Utils.RandomRange(0.8, 1.2),\n            true,\n        );\n\n        return turtle;\n    }\n}\n"],
  "mappings": "AAAA;AACA;AACA;AACA;AAEO,mCAA4B;AAAA,EAWvB,cAAc;AAFf,wBAAe;AAGlB,SAAK,SAAS,SAAS,cAAc;AACrC,SAAK,SAAS,SAAS,cAAc;AACrC,SAAK,WAAW,SAAS,cAAc;AACvC,SAAK,UAAU,SAAS,cAAc;AAEtC,SAAK;AAAA;AAAA,SAGK,cAAqC;AAC/C,QAAI,sBAAsB,YAAY;AAAW,4BAAsB,WAAW,IAAI;AACtF,WAAO,sBAAsB;AAAA;AAAA,EAGzB,mBAAyB;AAC7B,SAAK,OAAO,iBAAiB,SAAS,CAAC,MAAM;AACzC,QAAE;AACF,WAAK,eAAe;AACpB,eAAS,eAAe,aAAa,YAAY,KAAK,aAAa;AAAA;AAGvE,SAAK,OAAO,iBAAiB,SAAS,CAAC,MAAM;AACzC,QAAE;AACF,WAAK,eAAe;AACpB,eAAS,eAAe,aAAa,YAAY,KAAK,aAAa;AAAA;AAGvE,SAAK,SAAS,iBAAiB,SAAS,CAAC,MAAM;AAC3C,QAAE;AACF,WAAK,eAAe;AACpB,eAAS,eAAe,aAAa,YAAY,KAAK,aAAa;AAAA;AAGvE,SAAK,QAAQ,iBAAiB,SAAS,CAAC,MAAM;AAC1C,QAAE;AACF,WAAK,eAAe;AACpB,eAAS,eAAe,aAAa,YAAY,KAAK,aAAa;AAAA;AAAA;AAAA,EAIpE,uBAA+B;AAClC,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI,WAAqB;AACzB,QAAI,WAAqB;AAEzB,QAAI,KAAK,iBAAiB,GAAG;AACzB,cAAQ;AACR,aAAO;AACP,mBAAa;AACb,eAAS;AACT,iBAAW,CAAC,MAAM,MAAM;AACxB,iBAAW,CAAC,KAAK,MAAM;AAAA,eAChB,KAAK,iBAAiB,GAAG;AAChC,cAAQ;AACR,aAAO;AACP,mBAAa;AACb,eAAS;AACT,iBAAW,CAAC,KAAK,GAAK;AACtB,iBAAW,CAAC,GAAK,GAAK;AAAA,eACf,KAAK,iBAAiB,GAAG;AAChC,cAAQ;AACR,aAAO;AACP,mBAAa;AACb,eAAS;AACT,iBAAW,CAAC,KAAK,GAAK;AACtB,iBAAW,CAAC,MAAM,MAAM;AAAA,eACjB,KAAK,iBAAiB,GAAG;AAChC,cAAQ;AACR,aAAO;AACP,mBAAa;AACb,eAAS;AACT,iBAAW,CAAC,KAAK,GAAK;AACtB,iBAAW,CAAC,GAAK,KAAK;AAAA;AAI1B,UAAM,UAAkB;AACxB,YAAQ,KAAK,IAAI,KAAK,OAAO;AAC7B,UAAM,OAAgB,IAAI,QAAQ,KAAK;AACvC,aAAS,IAAI,GAAG,IAAI,YAAY;AAAK,WAAK;AAE1C,UAAM,SAAiB,IAAI,OACvB,KAAK,eACL,GACA,MAAM,iBAAiB,SACvB,UACA,UACA,MAAM,YAAY,KAAK,MACvB;AAGJ,WAAO;AAAA;AAAA;",
  "names": []
}
