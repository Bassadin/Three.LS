{
  "version": 3,
  "sources": ["/home/runner/work/Three.LS/Three.LS/src/LindenmayerFormular.ts"],
  "sourcesContent": ["import { Turtle3D } from './Turtles/Turtle3D';\nimport { Rule } from './Rule';\nimport { LSystem } from './LSystem';\nimport { Utils } from './Utils';\nimport { OBJExporter } from 'three/examples/jsm/exporters/OBJExporter.js';\nimport { scene, generateAndRepaintLindenmayerMesh } from './index';\n\nexport class LindenmayerFormular {\n    private static instance: LindenmayerFormular;\n\n    private btnAdd: HTMLInputElement;\n    private btnRemove: HTMLInputElement;\n    private btnUpload: HTMLInputElement;\n    private btnDownload: HTMLInputElement;\n    private objDownloadButton: HTMLInputElement;\n    private fileUpload: HTMLInputElement;\n\n    private rulesWrapper: HTMLDivElement;\n\n    private countAllRules: number;\n\n    private constructor() {\n        this.btnAdd = document.querySelector('#btnAddRule');\n        this.btnRemove = document.querySelector('#btnRemoveRule');\n        this.btnUpload = document.querySelector('#btnUpload');\n        this.btnDownload = document.querySelector('#btnDownload');\n        this.rulesWrapper = document.querySelector('#rulesWrapper');\n        this.objDownloadButton = document.querySelector('#btnDownloadOBJ');\n        this.fileUpload = document.querySelector('#jsonUpload');\n\n        this.countAllRules = 1;\n\n        this.addListenerToAddButton();\n        this.addListenerToRemoveButton();\n        this.addListenerToDownloadButton();\n        this.addListenerToUploadButton();\n        this.addListenerToOBJDownloadButton();\n    }\n\n    public static getInstance(): LindenmayerFormular {\n        if (LindenmayerFormular.instance == undefined) LindenmayerFormular.instance = new LindenmayerFormular();\n        return LindenmayerFormular.instance;\n    }\n\n    private addListenerToAddButton(): void {\n        this.btnAdd.addEventListener('click', () => {\n            this.addNewRuleField();\n        });\n    }\n\n    private addNewRuleField(): void {\n        this.rulesWrapper.insertAdjacentHTML(\n            'beforeend',\n            ' <div class=\"interface__rule-wrapper\" style=\"margin-top: 1rem;\" id=\"count' +\n                (this.countAllRules + 1) +\n                '\"> <div class=\"interface__input-inner-wrapper\"> <label>A' +\n                (this.countAllRules + 1) +\n                '</label> <input class=\"interface__input-field axioms\" type=\"text\" id=\"axiom' +\n                (this.countAllRules + 1) +\n                '\" maxlength=\"1\" placeholder=\"F\" required> </div> <div class=\"interface__input-inner-wrapper\"> <label>R' +\n                (this.countAllRules + 1) +\n                '</label> <input class=\"interface__input-field rules\" type=\"text\" id=\"rule' +\n                (this.countAllRules + 1) +\n                '\" placeholder=\"FF+[+F-F-F]-[-F+F+F]\" required> </div> </div>',\n        );\n        this.countAllRules++;\n        if (this.btnRemove.disabled == true) this.btnRemove.disabled = false;\n    }\n\n    private addListenerToRemoveButton(): void {\n        this.btnRemove.addEventListener('click', () => {\n            this.removeRuleField();\n        });\n    }\n\n    private removeRuleField(): void {\n        const allRulesLength = this.rulesWrapper.children.length;\n\n        if (allRulesLength > 1) {\n            document.querySelector('#count' + this.countAllRules).remove();\n            this.countAllRules--;\n        }\n\n        if (this.countAllRules <= 1) this.btnRemove.disabled = true;\n    }\n\n    private addListenerToDownloadButton(): void {\n        this.btnDownload.addEventListener('click', () => {\n            const baseAxiom = (document.getElementById('sentence') as HTMLInputElement).value;\n            const ruleString = [];\n            const axiomString = [];\n            //test\n            for (let j = 1; j <= this.countAllRules; j++) {\n                const value: string = j.toString();\n                ruleString[j - 1] = (document.getElementById('rule' + value) as HTMLInputElement).value;\n                axiomString[j - 1] = (document.getElementById('axiom' + value) as HTMLInputElement).value;\n            }\n\n            const iterationsCount = (document.getElementById('countIterations') as HTMLInputElement).value;\n            //\n            const turningAngle = (document.getElementById('degrees') as HTMLInputElement).value;\n            const stepLength = (document.getElementById('steplength') as HTMLInputElement).value;\n\n            const newObject = {\n                baseAxiom: baseAxiom,\n                replaceFrom: axiomString,\n                replaceTo: ruleString,\n                iterationsCount: iterationsCount,\n                turningAngle: turningAngle,\n                stepLength: stepLength,\n            };\n            const json_string = JSON.stringify(newObject, undefined, 2);\n            const link = document.createElement('a');\n            link.download = 'data.json';\n            const blob = new Blob([json_string], { type: 'text/plain' });\n            link.href = window.URL.createObjectURL(blob);\n            link.click();\n        });\n    }\n\n    private addListenerToUploadButton(): void {\n        this.btnUpload.addEventListener('click', () => {\n            const reader = new FileReader();\n            /*eslint-disable */\n            reader.onload = (_event: ProgressEvent) => {\n                /*eslint-enable */\n                const obj: any = JSON.parse(reader.result.toString());\n                let moreRulesExist = true;\n                //Liest X Rule und Axiom Werte ab\n                for (let j = 1; moreRulesExist == true; j++) {\n                    const value: string = j.toString();\n                    if (obj.replaceTo[j - 1] == null) {\n                        moreRulesExist = false;\n                        this.removeRuleField();\n                    } else {\n                        (<HTMLInputElement>document.getElementById('rule' + value)).value = obj.replaceTo[j - 1];\n                        (<HTMLInputElement>document.getElementById('axiom' + value)).value = obj.replaceFrom[j - 1];\n                        this.addNewRuleField();\n                    }\n                }\n                (<HTMLInputElement>document.getElementById('countIterations')).value = obj.iterationsCount;\n                (<HTMLInputElement>document.getElementById('degrees')).value = obj.turningAngle;\n                (<HTMLInputElement>document.getElementById('steplength')).value = obj.stepLength;\n                (<HTMLInputElement>document.getElementById('sentence')).value = obj.baseAxiom;\n\n                generateAndRepaintLindenmayerMesh();\n            };\n            //Reduzierung von rule Feldern\n            const staticRuleCounter = this.countAllRules;\n            for (let i = 1; i <= staticRuleCounter; i++) {\n                this.removeRuleField();\n            }\n\n            if (!this.fileUpload.files[0]) alert('Bitte Datei ausw\u00E4hlen');\n            else reader.readAsText(this.fileUpload.files[0]);\n        });\n    }\n\n    public generateLSystemImage(): Turtle3D {\n        const axioms: string[] = [];\n        const rules: string[] = [];\n\n        document.querySelectorAll('.axioms').forEach((element) => {\n            axioms.push((<HTMLInputElement>element).value.toUpperCase());\n        });\n\n        document.querySelectorAll('.rules').forEach((element) => {\n            rules.push((<HTMLInputElement>element).value.toUpperCase());\n        });\n\n        const sentence: string = (<HTMLInputElement>document.querySelector('#sentence')).value.toUpperCase();\n\n        const iterations: number = parseInt((<HTMLInputElement>document.querySelector('#countIterations')).value);\n        const degrees: number = parseInt((<HTMLInputElement>document.querySelector('#degrees')).value);\n        const steplength: number = parseInt((<HTMLInputElement>document.querySelector('#steplength')).value) / 10;\n\n        const ruleset: Rule[] = [];\n\n        for (let i = 0; i < axioms.length; i++) {\n            ruleset.push(new Rule(axioms[i], rules[i]));\n        }\n\n        const lsys: LSystem = new LSystem(sentence, ruleset);\n\n        console.time('L System generation');\n        for (let i = 0; i < iterations; i++) lsys.generate();\n\n        console.timeEnd('L System generation');\n\n        const turtle: Turtle3D = new Turtle3D(lsys.getSentence(), steplength, Utils.DegreesToRadians(degrees));\n\n        return turtle;\n    }\n\n    private addListenerToOBJDownloadButton(): void {\n        //Download rules presets\n        this.objDownloadButton.addEventListener('click', () => {\n            const exporter = new OBJExporter();\n            const result = exporter.parse(scene);\n\n            const link = document.createElement('a');\n            link.download = 'l_system.obj';\n            const blob = new Blob([result], { type: 'text/plain' });\n            link.href = window.URL.createObjectURL(blob);\n            link.click();\n        });\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
