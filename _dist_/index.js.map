{
  "version": 3,
  "sources": ["/home/runner/work/Three.LS/Three.LS/src/index.ts"],
  "sourcesContent": ["import * as THREE from 'three';\nimport { Renderer, Scene } from 'three';\nimport { TrackballControls } from 'three/examples/jsm/controls/TrackballControls.js';\nimport { Turtle3D } from './Turtles/Turtle3D';\nimport { LindenmayerFormular } from './LindenmayerFormular';\nimport PerformanceStats from './PerformanceStats';\n\nexport let scene: Scene;\nlet camera: THREE.PerspectiveCamera;\nlet renderer: Renderer;\nlet controls: TrackballControls;\n\nconst lindenmayerSettingsForm: LindenmayerFormular = LindenmayerFormular.getInstance();\n\nconst newTurtle: Turtle3D = lindenmayerSettingsForm.generateLSystemImage();\n\nif (scene !== undefined) {\n    repaint(newTurtle);\n} else {\n    initTestingScene(newTurtle);\n    animate();\n}\n\nfunction hookUpGenerateButtonEventListener() {\n    const btnGenerate: HTMLInputElement = document.querySelector('#btnGenerate');\n    btnGenerate.addEventListener('click', (e) => {\n        e.preventDefault();\n        const newTurtle: Turtle3D = lindenmayerSettingsForm.generateLSystemImage();\n\n        if (scene !== undefined) {\n            repaint(newTurtle);\n        } else {\n            initTestingScene(newTurtle);\n            animate();\n        }\n    });\n}\n\nfunction initTestingScene(turtle: Turtle3D) {\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 10000);\n\n    controls = new TrackballControls(camera, renderer.domElement);\n    controls.rotateSpeed = 2;\n    camera.position.set(0, 0, 15);\n    controls.update();\n\n    scene = new THREE.Scene();\n\n    turtle.addGeometryToScene(scene);\n\n    renderer.render(scene, camera);\n\n    window.addEventListener('resize', onWindowResize, false);\n\n    hookUpGenerateButtonEventListener();\n}\n\nfunction repaint(turtle: Turtle3D) {\n    for (let i = scene.children.length - 1; i >= 0; i--) {\n        const obj = scene.children[i];\n        scene.remove(obj);\n    }\n    turtle.addGeometryToScene(scene);\n}\n\nfunction animate() {\n    requestAnimationFrame(animate);\n    controls.update();\n    renderer.render(scene, camera);\n\n    //Performance Stats\n    PerformanceStats.instance.update();\n}\n\nfunction onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n}\n"],
  "mappings": "AAAA;AAEA;AAEA;AACA;AAEO,WAAI;AACX;AACA;AACA;AAEA,gCAAqD,oBAAoB;AAEzE,kBAA4B,wBAAwB;AAEpD,IAAI,UAAU;AACV,UAAQ;AAAA;AAER,mBAAiB;AACjB;AAAA;AAGJ;AACI,sBAAsC,SAAS,cAAc;AAC7D,cAAY,iBAAiB,SAAS;AAClC,MAAE;AACF,uBAA4B,wBAAwB;AAEpD,QAAI,UAAU;AACV,cAAQ;AAAA;AAER,uBAAiB;AACjB;AAAA;AAAA;AAAA;AAKZ;AACI,aAAW,IAAI,MAAM;AACrB,WAAS,QAAQ,OAAO,YAAY,OAAO;AAC3C,WAAS,KAAK,YAAY,SAAS;AAEnC,WAAS,IAAI,MAAM,kBAAkB,IAAI,OAAO,aAAa,OAAO,aAAa,GAAG;AAEpF,aAAW,IAAI,kBAAkB,QAAQ,SAAS;AAClD,WAAS,cAAc;AACvB,SAAO,SAAS,IAAI,GAAG,GAAG;AAC1B,WAAS;AAET,UAAQ,IAAI,MAAM;AAElB,SAAO,mBAAmB;AAE1B,WAAS,OAAO,OAAO;AAEvB,SAAO,iBAAiB,UAAU,gBAAgB;AAElD;AAAA;AAGJ;AACI,eAAa,MAAM,SAAS,SAAS,GAAG,KAAK,GAAG;AAC5C,gBAAY,MAAM,SAAS;AAC3B,UAAM,OAAO;AAAA;AAEjB,SAAO,mBAAmB;AAAA;AAG9B;AACI,wBAAsB;AACtB,WAAS;AACT,WAAS,OAAO,OAAO;AAGvB,mBAAiB,SAAS;AAAA;AAG9B;AACI,SAAO,SAAS,OAAO,aAAa,OAAO;AAC3C,SAAO;AAEP,WAAS,QAAQ,OAAO,YAAY,OAAO;AAAA;",
  "names": []
}
