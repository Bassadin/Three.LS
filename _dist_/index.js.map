{
  "version": 3,
  "sources": ["/home/runner/work/Three.LS/Three.LS/src/index.ts"],
  "sourcesContent": ["import * as THREE from 'three';\nimport { Clock, Scene } from 'three';\nimport { TrackballControls } from 'three/examples/jsm/controls/TrackballControls.js';\nimport Turtle from './Turtle';\nimport { LindenmayerFormular } from './LindenmayerFormular';\nimport PerformanceStats from './PerformanceStats';\nimport { ARButton } from 'three/examples/jsm/webxr/ARButton.js';\nimport { Utils } from './Utils';\nimport { LSystem } from './LSystem';\nimport { Rule } from './Rule';\n\nimport './styles/styles.scss';\n\nexport let scene: Scene;\nlet camera: THREE.PerspectiveCamera;\nlet renderer: THREE.WebGLRenderer;\nlet controls: TrackballControls;\nconst sceneClock: Clock = new Clock();\n\n// Can we handle routes differently somehow? ~bas\nconst windowLocationHref: string = window.location.href;\nconst windowFileLocationName: string = windowLocationHref.substring(windowLocationHref.lastIndexOf('/'));\n\nswitch (windowFileLocationName) {\n    case '/':\n        const lindenmayerSettingsForm: LindenmayerFormular = LindenmayerFormular.getInstance();\n        const newTurtle: Turtle = lindenmayerSettingsForm.generateLSystemImage();\n\n        if (scene !== undefined) {\n            repaint(newTurtle);\n        } else {\n            initTestingScene(newTurtle);\n            animate();\n        }\n        break;\n    case '/ar.html':\n        initArTestingScene();\n        animate();\n\n        break;\n    default:\n        console.error('Route not found');\n}\n\nfunction hookUpGenerateButtonEventListener() {\n    const btnGenerate: HTMLInputElement = document.querySelector('#btnGenerate');\n    btnGenerate.addEventListener('click', (e) => {\n        e.preventDefault();\n        generateAndRepaintLindenmayerMesh();\n    });\n}\n\nexport function generateAndRepaintLindenmayerMesh() {\n    const form: LindenmayerFormular = LindenmayerFormular.getInstance();\n    const newTurtle: Turtle = form.generateLSystemImage();\n    if (scene !== undefined) {\n        repaint(newTurtle);\n    } else {\n        initTestingScene(newTurtle);\n        animate();\n    }\n}\n\nfunction initTestingScene(turtle: Turtle) {\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    document.body.appendChild(renderer.domElement);\n\n    camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 10000);\n\n    controls = new TrackballControls(camera, renderer.domElement);\n    controls.rotateSpeed = 2;\n    camera.position.set(0, 0, 15);\n    controls.update();\n\n    scene = new THREE.Scene();\n\n    scene.add(turtle.generateMeshObject());\n    scene.add(Utils.createPlane());\n\n    console.log(scene);\n\n    sceneClock.start();\n\n    renderer.render(scene, camera);\n\n    // const directionalLight: THREE.DirectionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    // // directionalLight.target = mesh;\n    // directionalLight.position.set(0, -4, 10);\n    // scene.add(directionalLight);\n\n    const light = new THREE.AmbientLight(0xffffff, 1); // soft white light\n    scene.add(light);\n\n    window.addEventListener('resize', onWindowResize, false);\n\n    hookUpGenerateButtonEventListener();\n}\n\nfunction initArTestingScene() {\n    camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.01, 20);\n\n    scene = new THREE.Scene();\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.xr.enabled = true;\n    document.body.appendChild(renderer.domElement);\n\n    document.body.appendChild(ARButton.createButton(renderer));\n\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n\n    // Turtle data\n    const ruleset: Rule[] = [];\n    ruleset.push(new Rule('F', 'F&F+[+F/-F-F]-[-F+F+F]'));\n    const lsys: LSystem = new LSystem('F', ruleset);\n    for (let i = 0; i < 3; i++) lsys.generate();\n\n    function onSelect() {\n        const turtle: Turtle = new Turtle(lsys.getSentence(), 1, Utils.DegreesToRadians(30));\n        const turtleMesh = turtle.generateMeshObject();\n        turtleMesh.position.set(0, 0, -0.8).applyMatrix4(controller.matrixWorld);\n        turtleMesh.scale.set(1, 1, 1);\n        turtleMesh.quaternion.setFromRotationMatrix(controller.matrixWorld);\n        scene.add(turtleMesh);\n    }\n\n    const controller = renderer.xr.getController(0);\n    controller.addEventListener('select', onSelect);\n    scene.add(controller);\n\n    renderer.render(scene, camera);\n\n    window.addEventListener('resize', onWindowResize, false);\n}\n\nfunction repaint(turtle: Turtle) {\n    for (let i = scene.children.length - 1; i >= 0; i--) {\n        const obj = scene.children[i];\n        scene.remove(obj);\n    }\n    scene.add(turtle.generateMeshObject());\n}\n\nfunction animate() {\n    renderer.setAnimationLoop(render);\n}\n\nfunction render() {\n    renderer.render(scene, camera);\n\n    controls?.update(); // Only update controls if present\n    PerformanceStats.instance?.update(); // Only update stats if present\n\n    // branchingIds.forEach((eachId) => {\n    //     const obj: THREE.Mesh = scene.getObjectById(eachId) as THREE.Mesh;\n    //     if (obj) {\n    //         const shaderMaterial: ShaderMaterial = obj.material as ShaderMaterial;\n    //         shaderMaterial.uniforms.time.value += 0.01;\n    //         obj.rotation.copy(\n    //             new Euler(\n    //                 Math.sin(sceneClock.getElapsedTime() * 2) * 0.002 - 0.001,\n    //                 Math.sin(sceneClock.getElapsedTime() * 1) * 0.02 - 0.01,\n    //                 Math.cos(sceneClock.getElapsedTime() * 1.3) * 0.003 - 0.0015,\n    //                 'XYZ',\n    //             ),\n    //         );\n    //     }\n    // });\n}\n\nfunction onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n}\n"],
  "mappings": "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",
  "names": []
}
