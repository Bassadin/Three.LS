{
  "version": 3,
  "sources": ["/home/runner/work/Three.LS/Three.LS/src/Turtles/Turtle3D.ts"],
  "sourcesContent": ["import { Vector3, Quaternion, BufferGeometry, Float32BufferAttribute, MeshBasicMaterial, Mesh, Matrix4 } from 'three';\nimport { BaseTurtle } from './BaseTurtle';\n\nexport class Turtle3D extends BaseTurtle {\n    addGeometryToScene(scene: THREE.Scene): Mesh {\n        console.time('Geometry creation');\n        const tris: number[] = [];\n        const bufferGeometry: BufferGeometry = new BufferGeometry();\n        const colorsArray: number[] = [];\n        const leafCenterPositions: Vector3[] = [];\n        for (let i = 0; i < this.instructionString.length; i++) {\n            switch (this.instructionString.charAt(i)) {\n                case 'F': //Move and draw line in current direction\n                    const currentPositionBeforeMove = this.currentPosition.clone();\n                    const vertices: any[] = new Array(8);\n                    const newColors = [Math.random() * 0.7 + 0.3, Math.random() * 0.7 + 0.3, Math.random() * 0.7 + 0.3];\n\n                    this.move();\n                    const currentPositionAfterMove = this.currentPosition.clone();\n\n                    leafCenterPositions.push(\n                        currentPositionAfterMove.clone().sub(currentPositionBeforeMove.clone()).divideScalar(2),\n                    );\n\n                    const track: Vector3 = new Vector3(\n                        currentPositionAfterMove.x - currentPositionBeforeMove.x,\n                        currentPositionAfterMove.y - currentPositionBeforeMove.y,\n                        currentPositionAfterMove.z - currentPositionBeforeMove.z,\n                    );\n\n                    const trackLength: number = track.length() + (Math.random() * 0.08 - 0.04);\n\n                    vertices[0] = [\n                        currentPositionBeforeMove.x - trackLength / 2,\n                        currentPositionBeforeMove.y,\n                        currentPositionBeforeMove.z + trackLength / 2,\n                    ];\n                    vertices[1] = [\n                        currentPositionBeforeMove.x + trackLength / 2,\n                        currentPositionBeforeMove.y,\n                        currentPositionBeforeMove.z + trackLength / 2,\n                    ];\n                    vertices[2] = [\n                        currentPositionBeforeMove.x + trackLength / 2,\n                        currentPositionBeforeMove.y,\n                        currentPositionBeforeMove.z - trackLength / 2,\n                    ];\n                    vertices[3] = [\n                        currentPositionBeforeMove.x - trackLength / 2,\n                        currentPositionBeforeMove.y,\n                        currentPositionBeforeMove.z - trackLength / 2,\n                    ];\n                    vertices[4] = [\n                        currentPositionAfterMove.x - trackLength / 2,\n                        currentPositionAfterMove.y,\n                        currentPositionAfterMove.z + trackLength / 2,\n                    ];\n                    vertices[5] = [\n                        currentPositionAfterMove.x + trackLength / 2,\n                        currentPositionAfterMove.y,\n                        currentPositionAfterMove.z + trackLength / 2,\n                    ];\n                    vertices[6] = [\n                        currentPositionAfterMove.x + trackLength / 2,\n                        currentPositionAfterMove.y,\n                        currentPositionAfterMove.z - trackLength / 2,\n                    ];\n                    vertices[7] = [\n                        currentPositionAfterMove.x - trackLength / 2,\n                        currentPositionAfterMove.y,\n                        currentPositionAfterMove.z - trackLength / 2,\n                    ];\n\n                    tris.push(\n                        ...[\n                            // front face\n                            // first tri\n                            ...vertices[0],\n                            ...vertices[1],\n                            ...vertices[5],\n                            // second tri\n                            ...vertices[0],\n                            ...vertices[5],\n                            ...vertices[4],\n                            //right face\n                            //first tri\n                            ...vertices[1],\n                            ...vertices[2],\n                            ...vertices[6],\n                            //second tri\n                            ...vertices[1],\n                            ...vertices[6],\n                            ...vertices[5],\n                            //left face\n                            //first tri\n                            ...vertices[3],\n                            ...vertices[0],\n                            ...vertices[4],\n                            //second tri\n                            ...vertices[3],\n                            ...vertices[4],\n                            ...vertices[7],\n                            //back face\n                            //first tri\n                            ...vertices[2],\n                            ...vertices[3],\n                            ...vertices[7],\n                            // second tri\n                            ...vertices[2],\n                            ...vertices[7],\n                            ...vertices[6],\n                            // bottom face\n                            // first tri\n                            ...vertices[3],\n                            ...vertices[1],\n                            ...vertices[0],\n                            // second tri\n                            ...vertices[3],\n                            ...vertices[2],\n                            ...vertices[1],\n                            // top face\n                            // first tri\n                            ...vertices[4],\n                            ...vertices[5],\n                            ...vertices[7],\n                            // second tri\n                            ...vertices[5],\n                            ...vertices[6],\n                            ...vertices[7],\n                        ],\n                    );\n\n                    for (let i = 0; i < vertices.length * 12; i++) {\n                        colorsArray.push(...newColors);\n                    }\n\n                    break;\n                case 'G': //Move in current direction\n                    this.move();\n                    break;\n                case '[':\n                    this.saveState();\n                    break;\n                case ']':\n                    this.loadState();\n                    break;\n                case '+':\n                    this.currentRotation.multiply(\n                        new Quaternion().setFromAxisAngle(new Vector3(0, 0, 1), this.rotationStepSize),\n                    );\n                    break;\n                case '-':\n                    this.currentRotation.multiply(\n                        new Quaternion().setFromAxisAngle(new Vector3(0, 0, -1), this.rotationStepSize),\n                    );\n                    break;\n                case '&':\n                    this.currentRotation.multiply(\n                        new Quaternion().setFromAxisAngle(new Vector3(0, 1, 0), this.rotationStepSize),\n                    );\n                    break;\n                case '\u2227': //Achtung, \u2227 (mathematisches UND) und nicht ^ :D\n                    this.currentRotation.multiply(\n                        new Quaternion().setFromAxisAngle(new Vector3(0, -1, 0), this.rotationStepSize),\n                    );\n                    break;\n                case '\\\\':\n                    this.currentRotation.multiply(\n                        new Quaternion().setFromAxisAngle(new Vector3(1, 0, 0), this.rotationStepSize),\n                    );\n                    break;\n                case '/':\n                    this.currentRotation.multiply(\n                        new Quaternion().setFromAxisAngle(new Vector3(-1, 0, 0), this.rotationStepSize),\n                    );\n                    break;\n                case '|':\n                    this.currentRotation.multiply(new Quaternion().setFromAxisAngle(new Vector3(1, 0, 0), Math.PI));\n                    break;\n                default:\n                    console.log('Unknown axiom character: ' + this.instructionString.charAt(i));\n                    break;\n            }\n        }\n\n        bufferGeometry.setAttribute('position', new Float32BufferAttribute(tris, 3));\n        bufferGeometry.setAttribute('color', new Float32BufferAttribute(colorsArray, 3));\n\n        const material = new MeshBasicMaterial({\n            vertexColors: true,\n        });\n\n        let centerPoint: Vector3 = new Vector3();\n        leafCenterPositions.forEach((eachVector3: Vector3) => {\n            centerPoint.add(eachVector3);\n        });\n        centerPoint = centerPoint.divideScalar(leafCenterPositions.length);\n\n        const mesh = new Mesh(bufferGeometry, material);\n        mesh.applyMatrix4(new Matrix4().makeTranslation(centerPoint.x, centerPoint.y, centerPoint.z));\n        scene.add(mesh);\n\n        // const line = new MeshLine()\n        // line.setGeometry(bufferGeometry, (p: any) => 2 + Math.sin(50 * p))\n        // const material = new MeshLineMaterial({\n        //     lineWidth: 0.02,\n        //     dashArray: 1,\n        // })\n        // const mesh = new Mesh(line, material)\n        // scene.add(mesh)\n\n        console.timeEnd('Geometry creation');\n        scene.add(createPlane());\n        return mesh;\n    }\n\n    move(): void {\n        const absoluteMovement: Vector3 = new Vector3(0, 1, 0)\n            .applyQuaternion(this.currentRotation.clone())\n            .multiplyScalar(this.stepLength);\n\n        this.currentPosition.add(absoluteMovement);\n    }\n}\nfunction createPlane(): THREE.Mesh {\n    const bufferGeometry: THREE.BufferGeometry = new BufferGeometry();\n    const newColors = [Math.random() * 0.7 + 0.3, Math.random() * 0.7 + 0.3, Math.random() * 0.7 + 0.3];\n    const vertices: any[] = [];\n    const tris: number[] = [];\n    vertices[0] = [-5, -5, 2.5];\n    vertices[1] = [5, -5, 2.5];\n    vertices[2] = [5, -5, -2.5];\n    vertices[3] = [-5, -5, -2.5];\n    tris.push(...[...vertices[0], ...vertices[1], ...vertices[2], ...vertices[0], ...vertices[2], ...vertices[3]]);\n    const colorsArray: number[] = [...newColors, ...newColors, ...newColors, ...newColors, ...newColors, ...newColors];\n    bufferGeometry.setAttribute('position', new Float32BufferAttribute(tris, 3));\n\n    // console.log(colorsArray);\n\n    bufferGeometry.setAttribute('color', new Float32BufferAttribute(colorsArray, 3));\n\n    // console.log(bufferGeometry);\n\n    const material = new MeshBasicMaterial({\n        vertexColors: true,\n    });\n\n    const mesh = new Mesh(bufferGeometry, material);\n    return mesh;\n}\n"],
  "mappings": "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",
  "names": []
}
