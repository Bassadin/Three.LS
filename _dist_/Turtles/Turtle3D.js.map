{
  "version": 3,
  "sources": ["/home/runner/work/Three.LS/Three.LS/src/Turtles/Turtle3D.ts"],
  "sourcesContent": ["import { Vector3, Quaternion, BufferGeometry, Float32BufferAttribute, LineBasicMaterial, LineSegments } from 'three';\nimport { BaseTurtle } from './BaseTurtle';\n\nexport class Turtle3D extends BaseTurtle {\n    addGeometryToScene(scene: THREE.Scene): void {\n        console.time('Geometry creation');\n\n        const lineVertices: number[] = [];\n        const bufferGeometry: BufferGeometry = new BufferGeometry();\n        const colorsArray: number[] = [];\n\n        for (let i = 0; i < this.instructionString.length; i++) {\n            switch (this.instructionString.charAt(i)) {\n                case 'F': //Move and draw line in current direction\n                    const currentPositionBeforeMove = this.currentPosition.clone();\n\n                    const newColors = [Math.random() * 0.7 + 0.3, Math.random() * 0.7 + 0.3, Math.random() * 0.7 + 0.3];\n\n                    lineVertices.push(\n                        currentPositionBeforeMove.x,\n                        currentPositionBeforeMove.y,\n                        currentPositionBeforeMove.z,\n                    );\n                    colorsArray.push(...newColors);\n\n                    this.move();\n\n                    const currentPositionAfterMove = this.currentPosition.clone();\n                    lineVertices.push(\n                        currentPositionAfterMove.x,\n                        currentPositionAfterMove.y,\n                        currentPositionAfterMove.z,\n                    );\n                    colorsArray.push(...newColors);\n\n                    break;\n                case 'G': //Move in current direction\n                    this.move();\n                    break;\n                case '[':\n                    this.saveState();\n                    break;\n                case ']':\n                    this.loadState();\n                    break;\n                case '+':\n                    this.currentRotation.multiply(\n                        new Quaternion().setFromAxisAngle(new Vector3(0, 0, 1), this.rotationStepSize),\n                    );\n                    break;\n                case '-':\n                    this.currentRotation.multiply(\n                        new Quaternion().setFromAxisAngle(new Vector3(0, 0, -1), this.rotationStepSize),\n                    );\n                    break;\n                case '&':\n                    this.currentRotation.multiply(\n                        new Quaternion().setFromAxisAngle(new Vector3(0, 1, 0), this.rotationStepSize),\n                    );\n                    break;\n                case '\u2227': //Achtung, \u2227 (mathematisches UND) und nicht ^ :D\n                    this.currentRotation.multiply(\n                        new Quaternion().setFromAxisAngle(new Vector3(0, -1, 0), this.rotationStepSize),\n                    );\n                    break;\n                case '\\\\':\n                    this.currentRotation.multiply(\n                        new Quaternion().setFromAxisAngle(new Vector3(1, 0, 0), this.rotationStepSize),\n                    );\n                    break;\n                case '/':\n                    this.currentRotation.multiply(\n                        new Quaternion().setFromAxisAngle(new Vector3(-1, 0, 0), this.rotationStepSize),\n                    );\n                    break;\n                case '|':\n                    this.currentRotation.multiply(new Quaternion().setFromAxisAngle(new Vector3(1, 0, 0), Math.PI));\n                    break;\n                default:\n                    console.log('Unknown axiom character: ' + this.instructionString.charAt(i));\n                    break;\n            }\n        }\n\n        bufferGeometry.setAttribute('position', new Float32BufferAttribute(lineVertices, 3));\n        bufferGeometry.setAttribute('color', new Float32BufferAttribute(colorsArray, 3));\n\n        const material = new LineBasicMaterial({\n            vertexColors: true,\n        });\n        const line = new LineSegments(bufferGeometry, material);\n        scene.add(line);\n\n        // const line = new MeshLine()\n        // line.setGeometry(bufferGeometry, (p: any) => 2 + Math.sin(50 * p))\n        // const material = new MeshLineMaterial({\n        //     lineWidth: 0.02,\n        //     dashArray: 1,\n        // })\n        // const mesh = new Mesh(line, material)\n        // scene.add(mesh)\n\n        console.timeEnd('Geometry creation');\n    }\n\n    move(): void {\n        const absoluteMovement: Vector3 = new Vector3(0, 1, 0)\n            .applyQuaternion(this.currentRotation.clone())\n            .multiplyScalar(this.stepLength);\n\n        this.currentPosition.add(absoluteMovement);\n    }\n}\n"],
  "mappings": "AAAA;AACA;AADA,8BAG8B;AAAA,EAC1B,mBAAmB;AACf,YAAQ,KAAK;AAEb,yBAA+B;AAC/B,2BAAuC,IAAI;AAC3C,wBAA8B;AAE9B,iBAAa,GAAG,IAAI,KAAK,kBAAkB,QAAQ;AAC/C,cAAQ,KAAK,kBAAkB,OAAO;AAAA,aAC7B;AACD,4CAAkC,KAAK,gBAAgB;AAEvD,4BAAkB,CAAC,KAAK,WAAW,MAAM,KAAK,KAAK,WAAW,MAAM,KAAK,KAAK,WAAW,MAAM;AAE/F,uBAAa,KACT,0BAA0B,GAC1B,0BAA0B,GAC1B,0BAA0B;AAE9B,sBAAY,KAAK,GAAG;AAEpB,eAAK;AAEL,2CAAiC,KAAK,gBAAgB;AACtD,uBAAa,KACT,yBAAyB,GACzB,yBAAyB,GACzB,yBAAyB;AAE7B,sBAAY,KAAK,GAAG;AAEpB;AAAA,aACC;AACD,eAAK;AACL;AAAA,aACC;AACD,eAAK;AACL;AAAA,aACC;AACD,eAAK;AACL;AAAA,aACC;AACD,eAAK,gBAAgB,SACjB,IAAI,aAAa,iBAAiB,IAAI,QAAQ,GAAG,GAAG,IAAI,KAAK;AAEjE;AAAA,aACC;AACD,eAAK,gBAAgB,SACjB,IAAI,aAAa,iBAAiB,IAAI,QAAQ,GAAG,GAAG,KAAK,KAAK;AAElE;AAAA,aACC;AACD,eAAK,gBAAgB,SACjB,IAAI,aAAa,iBAAiB,IAAI,QAAQ,GAAG,GAAG,IAAI,KAAK;AAEjE;AAAA,aACC;AACD,eAAK,gBAAgB,SACjB,IAAI,aAAa,iBAAiB,IAAI,QAAQ,GAAG,IAAI,IAAI,KAAK;AAElE;AAAA,aACC;AACD,eAAK,gBAAgB,SACjB,IAAI,aAAa,iBAAiB,IAAI,QAAQ,GAAG,GAAG,IAAI,KAAK;AAEjE;AAAA,aACC;AACD,eAAK,gBAAgB,SACjB,IAAI,aAAa,iBAAiB,IAAI,QAAQ,IAAI,GAAG,IAAI,KAAK;AAElE;AAAA,aACC;AACD,eAAK,gBAAgB,SAAS,IAAI,aAAa,iBAAiB,IAAI,QAAQ,GAAG,GAAG,IAAI,KAAK;AAC3F;AAAA;AAEA,kBAAQ,IAAI,8BAA8B,KAAK,kBAAkB,OAAO;AACxE;AAAA;AAAA;AAIZ,mBAAe,aAAa,YAAY,IAAI,uBAAuB,cAAc;AACjF,mBAAe,aAAa,SAAS,IAAI,uBAAuB,aAAa;AAE7E,qBAAiB,IAAI,kBAAkB;AAAA,MACnC,cAAc;AAAA;AAElB,iBAAa,IAAI,aAAa,gBAAgB;AAC9C,UAAM,IAAI;AAWV,YAAQ,QAAQ;AAAA;AAAA,EAGpB;AACI,6BAAkC,IAAI,QAAQ,GAAG,GAAG,GAC/C,gBAAgB,KAAK,gBAAgB,SACrC,eAAe,KAAK;AAEzB,SAAK,gBAAgB,IAAI;AAAA;AAAA;",
  "names": []
}
